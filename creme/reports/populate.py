# -*- coding: utf-8 -*-

################################################################################
#    Creme is a free/open-source Customer Relationship Management software
#    Copyright (C) 2009-2011  Hybird
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

from django.conf import settings
from django.utils.translation import ugettext as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User

from creme_core import autodiscover as creme_core_autodiscover
from creme_core.models import SearchConfigItem
from creme_core.models.header_filter import HeaderFilterItem, HeaderFilter, HFI_FIELD, HFI_RELATION
from creme_core.models.relation import RelationType
from creme_core.models.block import InstanceBlockConfigItem, BlockConfigItem
from creme_core.gui.block import block_registry
from creme_core.utils import create_or_update as create
from creme_core.management.commands.creme_populate import BasePopulator
from creme_core.utils.meta import get_verbose_field_name
from creme_core.utils.id_generator import generate_string_id_and_save

from models import Report, Field, ReportGraph
from models.graph import RGT_FK, RGT_RANGE
from blocks import ReportGraphBlock
from forms.blocks import _get_volatile_column_verbose


class Populator(BasePopulator):
    dependencies = ['creme.creme_core']

    def populate(self, *args, **kwargs):
        get_ct = ContentType.objects.get_for_model

        hf = create(HeaderFilter, 'reports-hf', name=_(u'Report view'), entity_type=get_ct(Report), is_custom=False)
        pref  = 'reports-hfi_report_'
        create(HeaderFilterItem, pref + 'name', order=1, name='name',     title=_(u'Name'),               type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="name__icontains")
        create(HeaderFilterItem, pref + 'ct',   order=2, name='ct__name', title=_(u"Entity type - Name"), type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="ct__name__icontains")

        SearchConfigItem.create(Report, ['name', 'ct__name'])

        #TODO: move to opportunities.populate ....
        if 'creme.opportunities' in settings.INSTALLED_APPS:
            from creme_core.models.list_view_filter import Filter, FilterCondition, FilterValue
            from creme_core.constants import FILTER_TYPE_EQUALS

            from opportunities.models.opportunity import Opportunity
            from opportunities.constants import REL_OBJ_EMIT_ORGA

            #Create the report 'Opportunities generated by organisation managed by Creme'

            opp_ct = get_ct(Opportunity)

            #Create a list view filter to use it in the report
            opp_filter = create(Filter, name=_(u"Generated by a creme managed organisation"), model_ct=opp_ct, is_custom=False)
            opp_filter_cond  = create(FilterCondition, type_id=FILTER_TYPE_EQUALS, champ='relations__type__id')
            opp_filter_value = create(FilterValue, value=REL_OBJ_EMIT_ORGA)

            opp_filter_cond.values = [opp_filter_value]
            opp_filter_cond.save()

            opp_filter.conditions = [opp_filter_cond]
            opp_filter.save()

            admin = User.objects.all()[0]#TODO: Make a real 'default' user

            #Create the report
            opp_report = create(Report, name=_(u"Opportunities generated by a creme managed organisation"), ct=opp_ct, filter=opp_filter, user=admin)
            opp_report_columns = []

            try:
                #Create fields of the report
                rt = RelationType.objects.get(pk=REL_OBJ_EMIT_ORGA)
                opp_report_columns.append(create(Field, name='name',              title=get_verbose_field_name(Opportunity, 'name'),              order=1, type=HFI_FIELD))
                opp_report_columns.append(create(Field, name='estimated_sales',   title=get_verbose_field_name(Opportunity, 'estimated_sales'),   order=2, type=HFI_FIELD))
                opp_report_columns.append(create(Field, name='made_sales',        title=get_verbose_field_name(Opportunity, 'made_sales'),        order=3, type=HFI_FIELD))
                opp_report_columns.append(create(Field, name='sales_phase__name', title=get_verbose_field_name(Opportunity, 'sales_phase__name'), order=4, type=HFI_FIELD))
                opp_report_columns.append(create(Field, name=REL_OBJ_EMIT_ORGA,   title=unicode(rt),                                              order=5, type=HFI_RELATION))
            except RelationType.DoesNotExist:
                if kwargs.get('verbose', False):
                    print "%s does not exist. Have you done Opportunies populates?" % REL_OBJ_EMIT_ORGA

            opp_report.columns = opp_report_columns
            opp_report.save()

            #Create 2 graphs
            graph_name_1 = _(u"Sum %(estimated_sales)s / %(sales_phase)s") % {
                                'estimated_sales': get_verbose_field_name(Opportunity, 'estimated_sales'),
                                'sales_phase':     get_verbose_field_name(Opportunity, 'sales_phase'),
                            }
            graph_name_2 = _(u"Sum %(estimated_sales)s / Quarter (90 days on %(closing_date)s)") % {
                                'estimated_sales': get_verbose_field_name(Opportunity, 'estimated_sales'),
                                'closing_date':    get_verbose_field_name(Opportunity, 'closing_date'),
                            }
            opp_report_graph_1 = create(ReportGraph, name=graph_name_1, report=opp_report, abscissa='sales_phase',  ordinate='estimated_sales__sum', type=RGT_FK,    is_count=False, user=admin)
            opp_report_graph_2 = create(ReportGraph, name=graph_name_2, report=opp_report, abscissa='closing_date', ordinate='estimated_sales__sum', type=RGT_RANGE, is_count=False, user=admin, days=90)

            #Create 2 instance block items for the 2 graphs
#            opp_rgraph1_vcolumn = '%s#%s' % (REL_OBJ_EMIT_ORGA, HFI_RELATION)
            rgraph_1_instance_block = create(InstanceBlockConfigItem, entity=opp_report_graph_1, block_id=ReportGraphBlock.generate_id('creme_config', u"%s_" % (opp_report_graph_1.id, )), verbose = u"%s - %s" % (opp_report_graph_1, _(u'None')), data='')
            rgraph_2_instance_block = create(InstanceBlockConfigItem, entity=opp_report_graph_2, block_id=ReportGraphBlock.generate_id('creme_config', u"%s_" % (opp_report_graph_2.id, )), verbose = u"%s - %s" % (opp_report_graph_2, _(u'None')), data='')

            rgraph_1_instance_block_id = rgraph_1_instance_block.block_id
            rgraph_2_instance_block_id = rgraph_2_instance_block.block_id

            blocks_to_save = [
                BlockConfigItem(content_type=opp_ct, block_id=rgraph_1_instance_block_id, order=1, on_portal=True),
                BlockConfigItem(content_type=opp_ct, block_id=rgraph_2_instance_block_id, order=2, on_portal=True)
            ]

            creme_core_autodiscover()
            block_ids = [id_ for id_, block in block_registry if block.configurable]
            for i, block_id in enumerate(block_ids):
                blocks_to_save.append(BlockConfigItem(content_type=opp_ct, block_id=block_id, order=i+3, on_portal=False))

            #Set instance graphs on opportunity portal
            generate_string_id_and_save(BlockConfigItem, blocks_to_save, 'creme_config-userbci')
