# -*- coding: utf-8 -*-

################################################################################
#    Creme is a free/open-source Customer Relationship Management software
#    Copyright (C) 2009-2011  Hybird
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

from logging import info

from django.utils.translation import ugettext as _
from django.conf import settings

from creme_core.models.header_filter import HeaderFilterItem, HeaderFilter, HFI_FIELD
from creme_core.models import RelationType, ButtonMenuItem, SearchConfigItem, SearchField
from creme_core.utils import create_or_update as create
from creme_core.management.commands.creme_populate import BasePopulator

from creme_config.models import SettingKey, SettingValue

from persons.models import Contact, Organisation

from products.models import Product, Service

from billing.models import SalesOrder, Invoice, Quote

from opportunities.models import SalesPhase, Origin, Opportunity
from opportunities.buttons import linked_opportunity_button
from opportunities.constants import *


class Populator(BasePopulator):
    dependencies = ['creme.creme_core', 'creme.creme_config', 'creme.persons', 'creme.products', 'creme.billing']

    def populate(self, *args, **kwargs):
        RelationType.create((REL_SUB_TARGETS_ORGA,      _(u'targets the organisation/contact'), [Opportunity]),
                            (REL_OBJ_TARGETS_ORGA,      _(u"targeted by the opportunity"),      [Organisation, Contact]),
                            is_internal=True
                           )
        RelationType.create((REL_SUB_LINKED_PRODUCT,    _(u"is linked to the opportunity"),          [Product]),
                            (REL_OBJ_LINKED_PRODUCT,    _(u"concerns the product"),                  [Opportunity]))
        RelationType.create((REL_SUB_LINKED_SERVICE,    _(u"is linked to the opportunity"),          [Service]),
                            (REL_OBJ_LINKED_SERVICE,    _(u"concerns the service"),                  [Opportunity]))
        RelationType.create((REL_SUB_LINKED_CONTACT,    _(u"involves in the opportunity"),           [Contact]),
                            (REL_OBJ_LINKED_CONTACT,    _(u"stages"),                                [Opportunity]))
        RelationType.create((REL_SUB_LINKED_SALESORDER, _(u"is associate with the opportunity"),     [SalesOrder]),
                            (REL_OBJ_LINKED_SALESORDER, _(u"has generated the salesorder"),          [Opportunity]))
        RelationType.create((REL_SUB_LINKED_INVOICE,    _(u"generated for the opportunity"),         [Invoice]),
                            (REL_OBJ_LINKED_INVOICE,    _(u"has resulted in the invoice"),           [Opportunity]))
        RelationType.create((REL_SUB_LINKED_QUOTE,      _(u"generated for the opportunity"),         [Quote]),
                            (REL_OBJ_LINKED_QUOTE,      _(u"has resulted in the quote"),             [Opportunity]))
        RelationType.create((REL_SUB_RESPONSIBLE,       _(u"is responsible for"),                    [Contact]),
                            (REL_OBJ_RESPONSIBLE,       _(u"has as responsible contact"),            [Opportunity]))
        RelationType.create((REL_SUB_EMIT_ORGA,         _(u"has generated the opportunity"),         [Organisation]),
                            (REL_OBJ_EMIT_ORGA,         _(u"has been generated by"),                 [Opportunity]))
        RelationType.create((REL_SUB_CURRENT_DOC,       _(u'is the current accounting document of'), [SalesOrder, Invoice, Quote]),
                            (REL_OBJ_CURRENT_DOC,       _(u'has as current accounting document'),    [Opportunity]))

        sk = SettingKey.create(pk=SETTING_USE_LINES,
                               description=_(u"Use Product and Service lines"),
                               app_label='opportunities', type=SettingKey.BOOL
                              )
        SettingValue.objects.create(key=sk, user=None, value=False)

        create(SalesPhase, 1, name=_(u"Forthcoming"),       description="...")
        create(SalesPhase, 2, name=_(u"Abandoned"),         description="...")
        create(SalesPhase, 3, name=_(u"Won"),               description="...")
        create(SalesPhase, 4, name=_(u"Lost"),              description="...")
        create(SalesPhase, 5, name=_(u"Under negotiation"), description="...")
        create(SalesPhase, 6, name=_(u"In progress"),       description="...")

        create(Origin, 1, name=_(u"None"),             description="...")
        create(Origin, 2, name=_(u"Web site"),         description="...")
        create(Origin, 3, name=_(u"Mouth"),            description="...")
        create(Origin, 4, name=_(u"Show"),             description="...")
        create(Origin, 5, name=_(u"Direct email"),     description="...")
        create(Origin, 6, name=_(u"Direct phonecall"), description="...")
        create(Origin, 7, name=_(u"Employee"),         description="...")
        create(Origin, 8, name=_(u"Partner"),          description="...")
        create(Origin, 9, name=_(u"Other"),            description="...")

        hf   = HeaderFilter.create(pk='opportunities-hf', name=_(u'Opportunity view'), model=Opportunity)
        pref = 'opportunities-hfi_'
        create(HeaderFilterItem, pref + 'name',    order=1, name='name',              title=_(u'Name'),               type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="name__icontains")
        create(HeaderFilterItem, pref + 'ref',     order=2, name='reference',         title=_(u'Reference'),          type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="reference__icontains")
        create(HeaderFilterItem, pref + 'phase',   order=3, name='sales_phase__name', title=_(u'Sales phase - Name'), type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="sales_phase__name__icontains")
        create(HeaderFilterItem, pref + 'expdate', order=4, name='closing_date',      title=_(u'Closing date'),       type=HFI_FIELD, header_filter=hf, has_a_filter=True, editable=True, sortable=True, filter_string="closing_date__range")

        ButtonMenuItem.create(pk='opportunities-linked_opp_button', model=Organisation, button=linked_opportunity_button, order=30)

        SearchConfigItem.create(Opportunity, ['name', 'made_sales', 'sales_phase__name', 'origin__name'])

        if 'creme.reports' in settings.INSTALLED_APPS:
            info('Reports app is installed => we create an Opportunity report, with 2 graphs, and related blocks')
            self.create_reports()

    def create_reports(self):
        from django.contrib.contenttypes.models import ContentType
        from django.contrib.auth.models import User

        from creme_core import autodiscover as creme_core_autodiscover
        from creme_core.models import EntityFilter, EntityFilterCondition, BlockConfigItem, InstanceBlockConfigItem
        #from creme_core.models.list_view_filter import Filter, FilterCondition, FilterValue
        from creme_core.models.header_filter import HFI_RELATION
        from creme_core.gui.block import block_registry
        from creme_core.utils.meta import get_verbose_field_name
        from creme_core.utils.id_generator import generate_string_id_and_save

        from persons.constants import FILTER_MANAGED_ORGA

        from reports.models import Report, Field, ReportGraph
        from reports.models.graph import RGT_FK, RGT_RANGE
        from reports.blocks import ReportGraphBlock

        #Create the report 'Opportunities generated by organisation managed by Creme'
        opp_ct = ContentType.objects.get_for_model(Opportunity)

        #Create a list view filter to use it in the report
        try:
            orga_filter = EntityFilter.objects.get(pk=FILTER_MANAGED_ORGA)
        except EntityFilter.DoesNotExist:
            info('Filter "Organisations managed by Creme" does not exists : have you populated the "persons" app ?? [Report can not be created]')
            return

        opp_filter = EntityFilter.create('opportunities-gen_by_managed', _(u"Generated by a Creme managed organisation"), Opportunity)
        opp_filter.set_conditions([EntityFilterCondition.build_4_relation_subfilter(rtype=RelationType.objects.get(pk=REL_OBJ_EMIT_ORGA),
                                                                                    has=True, subfilter=orga_filter
                                                                                   )
                                  ])

        admin = User.objects.get(pk=1)

        #Create the report
        opp_report = create(Report, name=_(u"Opportunities generated by a Creme managed organisation"), ct=opp_ct, filter=opp_filter, user=admin)
        opp_report_columns = []

        try:
            #Create fields of the report
            rt = RelationType.objects.get(pk=REL_OBJ_EMIT_ORGA)
            opp_report_columns.append(create(Field, name='name',              title=get_verbose_field_name(Opportunity, 'name'),              order=1, type=HFI_FIELD))
            opp_report_columns.append(create(Field, name='estimated_sales',   title=get_verbose_field_name(Opportunity, 'estimated_sales'),   order=2, type=HFI_FIELD))
            opp_report_columns.append(create(Field, name='made_sales',        title=get_verbose_field_name(Opportunity, 'made_sales'),        order=3, type=HFI_FIELD))
            opp_report_columns.append(create(Field, name='sales_phase__name', title=get_verbose_field_name(Opportunity, 'sales_phase__name'), order=4, type=HFI_FIELD))
            opp_report_columns.append(create(Field, name=REL_OBJ_EMIT_ORGA,   title=unicode(rt),                                              order=5, type=HFI_RELATION))
        except RelationType.DoesNotExist:
            if kwargs.get('verbose', False):
                print "%s does not exist. Have you done Opportunies populates?" % REL_OBJ_EMIT_ORGA

        opp_report.columns = opp_report_columns
        opp_report.save()

        #Create 2 graphs
        graph_name_1 = _(u"Sum %(estimated_sales)s / %(sales_phase)s") % {
                            'estimated_sales': get_verbose_field_name(Opportunity, 'estimated_sales'),
                            'sales_phase':     get_verbose_field_name(Opportunity, 'sales_phase'),
                        }
        graph_name_2 = _(u"Sum %(estimated_sales)s / Quarter (90 days on %(closing_date)s)") % {
                            'estimated_sales': get_verbose_field_name(Opportunity, 'estimated_sales'),
                            'closing_date':    get_verbose_field_name(Opportunity, 'closing_date'),
                        }
        opp_report_graph_1 = create(ReportGraph, name=graph_name_1, report=opp_report, abscissa='sales_phase',  ordinate='estimated_sales__sum', type=RGT_FK,    is_count=False, user=admin)
        opp_report_graph_2 = create(ReportGraph, name=graph_name_2, report=opp_report, abscissa='closing_date', ordinate='estimated_sales__sum', type=RGT_RANGE, is_count=False, user=admin, days=90)


        old_bci = BlockConfigItem.objects.filter(content_type=opp_ct)
        if old_bci:
            info('Delete the old block config for Opportunies')
            old_bci.delete()

        #Create 2 instance block items for the 2 graphs
#            opp_rgraph1_vcolumn = '%s#%s' % (REL_OBJ_EMIT_ORGA, HFI_RELATION)
        rgraph_1_instance_block = create(InstanceBlockConfigItem, entity=opp_report_graph_1, block_id=ReportGraphBlock.generate_id('creme_config', u"%s_" % (opp_report_graph_1.id, )), verbose = u"%s - %s" % (opp_report_graph_1, _(u'None')), data='')
        rgraph_2_instance_block = create(InstanceBlockConfigItem, entity=opp_report_graph_2, block_id=ReportGraphBlock.generate_id('creme_config', u"%s_" % (opp_report_graph_2.id, )), verbose = u"%s - %s" % (opp_report_graph_2, _(u'None')), data='')

        rgraph_1_instance_block_id = rgraph_1_instance_block.block_id
        rgraph_2_instance_block_id = rgraph_2_instance_block.block_id

        blocks_to_save = [
            BlockConfigItem(content_type=opp_ct, block_id=rgraph_1_instance_block_id, order=1, on_portal=True),
            BlockConfigItem(content_type=opp_ct, block_id=rgraph_2_instance_block_id, order=2, on_portal=True)
        ]

        creme_core_autodiscover()
        block_ids = [id_ for id_, block in block_registry if block.configurable]
        for i, block_id in enumerate(block_ids):
            blocks_to_save.append(BlockConfigItem(content_type=opp_ct, block_id=block_id, order=i+3, on_portal=False))

        #Set instance graphs on opportunity portal
        generate_string_id_and_save(BlockConfigItem, blocks_to_save, 'creme_config-userbci')
