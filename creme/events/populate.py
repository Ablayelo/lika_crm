# -*- coding: utf-8 -*-

################################################################################
#    Creme is a free/open-source Customer Relationship Management software
#    Copyright (C) 2009-2011  Hybird
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

from django.utils.translation import ugettext as _

from creme_core.models import SearchConfigItem, RelationType, HeaderFilterItem, HeaderFilter
from creme_core.utils import create_or_update as create
from creme_core.management.commands.creme_populate import BasePopulator

from persons.models import Contact

from opportunities.models import Opportunity

from events.models import EventType, Event
from events.constants import *


class Populator(BasePopulator):
    dependencies = ['creme.creme_core']

    def populate(self, *args, **kwargs):
        create_rtype = RelationType.create
        create_rtype((REL_SUB_IS_INVITED_TO,       _(u'is invited to the event'),               [Contact]),
                     (REL_OBJ_IS_INVITED_TO,       _(u'has invited'),                           [Event]),
                     is_internal=True,
                    )
        create_rtype((REL_SUB_ACCEPTED_INVITATION, _(u'accepted the invitation to the event'),  [Contact]),
                     (REL_OBJ_ACCEPTED_INVITATION, _(u'prepares to receive'),                   [Event]),
                     is_internal=True,
                     )
        create_rtype((REL_SUB_REFUSED_INVITATION,  _(u'refused the invitation to the event'),   [Contact]),
                     (REL_OBJ_REFUSED_INVITATION,  _(u'do not prepare to receive any more'),    [Event]),
                     is_internal=True,
                    )
        create_rtype((REL_SUB_CAME_EVENT,          _(u'came to the event'),                     [Contact]),
                     (REL_OBJ_CAME_EVENT,          _(u'received'),                              [Event]),
                     is_internal=True,
                    )
        create_rtype((REL_SUB_NOT_CAME_EVENT,      _(u'did not come to the event'),             [Contact]),
                     (REL_OBJ_NOT_CAME_EVENT,      _(u'did not receive'),                       [Event]),
                     is_internal=True,
                    )
        create_rtype((REL_SUB_GEN_BY_EVENT,        _(u'generated by the event'),                [Opportunity]),
                     (REL_OBJ_GEN_BY_EVENT,        _(u'(event) has generated the opportunity'), [Event]),
                     is_internal=True,
                    )

        #TODO: use 'start' arg with python 2.6.....
        for i, name in enumerate((_('Show'), _('Conference'), _('Breakfast'), _('Brunch'))):
            create(EventType, i + 1, name=name)

        hf = HeaderFilter.create(pk='events-hf', name=_(u'Event view'), model=Event)
        hf.set_items([HeaderFilterItem.build_4_field(model=Event, name='name'),
                      HeaderFilterItem.build_4_field(model=Event, name='type__name'),
                      HeaderFilterItem.build_4_field(model=Event, name='start_date'),
                      HeaderFilterItem.build_4_field(model=Event, name='end_date'),
                     ])

        SearchConfigItem.create(Event, ['name', 'description', 'type__name'])
